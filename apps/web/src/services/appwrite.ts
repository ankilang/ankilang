import { Client, Account } from 'appwrite';

const endpoint = import.meta.env.VITE_APPWRITE_ENDPOINT;
const projectId = import.meta.env.VITE_APPWRITE_PROJECT_ID;

if (!endpoint || !projectId) {
  throw new Error(
    'VITE_APPWRITE_ENDPOINT and VITE_APPWRITE_PROJECT_ID must be defined in your .env file.'
  );
}

const client = new Client().setEndpoint(endpoint).setProject(projectId);

export const account = new Account(client);

/**
 * R√©cup√®re le JWT de la session Appwrite actuelle
 * Utilis√© pour authentifier les requ√™tes vers l'API Vercel s√©curis√©e
 */
export async function getSessionJWT(): Promise<string | null> {
  try {
    console.log('üîê [Appwrite] Tentative de g√©n√©ration du JWT...');
    
    // V√©rifier d'abord si l'utilisateur est connect√©
    const currentUser = await account.get();
    console.log('üë§ [Appwrite] Utilisateur connect√©:', {
      id: currentUser.$id,
      email: currentUser.email,
      name: currentUser.name
    });
    
    const session = await account.createJWT();
    console.log('üé´ [Appwrite] JWT g√©n√©r√© avec succ√®s:', {
      jwtLength: session.jwt.length,
      jwtPreview: session.jwt.substring(0, 50) + '...'
    });
    
    return session.jwt;
  } catch (error) {
    console.error('‚ùå [Appwrite] √âchec de g√©n√©ration du JWT:', error);
    
    // Logs d√©taill√©s pour le debug
    if (error instanceof Error) {
      console.error('‚ùå [Appwrite] D√©tails de l\'erreur:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
    }
    
    return null;
  }
}

export default client;
